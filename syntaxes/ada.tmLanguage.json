{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ada",
	"foldingStartMarker": "\\bbegin\\b",
	"foldingStopMarker": "\\bend\\b",
	"patterns": [
		{ "include": "#aspect" },
		{ "include": "#attribute" },
		{ "include": "#comment" },
		{ "include": "#punctuation" },
		{ "include": "#type" },
		{ "include": "#keyword" },
		{ "include": "#value" }
	],
	"repository": {
		"aspect": {
			"patterns": [
				{
					"name": "meta.aspect.ada",
					"begin": "\\bwith\\b",
					"end": "(\\bis\\b|;)",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" }
							]
						}
					},
					"patterns": [
						{
							"name": "keyword.control.directive.ada",
							"match": "(?i)\\b(address|alignment|all_calls_remote|asynchronous|atomic|atomic_components|attach_handler|bit_order|component_size|convention|constant_indexing|cpu|default_component_value|default_iterator|default_storage_pool|default_value|dispatching_domain|dynamic_predicate|elaborate_body|export|external_name|external_tag|implicit_dereference|import|independent|independent_components|inline|input|iterator_element|interrupt_handler|interrupt_priority|link_name|machine_radix|no_return|output|pack|post|pre|preelaborate|priority|pure|read|relative_deadline|remote_call_interface|remote_types|size|shared_passive|small|static_predicate|storage_size|storage_pool|stream_size|synchronization|type_invariant|unchecked_union|variable_indexing|volatile|volatile_components|write)\\b"
						},
						{
							"name": "keyword.control.directive.ada",
							"match": "(?i)\\b(ada_2005|ada_2012|favor_top_level|inline_always|object_size|persistent_bss|pure_function|remote_access_type|shared|suppress_debug_info|test_case|universal_aliasing|unmodified|unreferenced|unreferenced_objects|value_size|warnings)\\b"
						}
					]
				}
			]
		},
		"attribute": {
			"patterns": [
				{
					"name": "entity.other.attribute-name.ada",
					"match": "(?i)'(access|address|adjacent|aft|alignment|base|bit_order|body_version|callable|caller|ceiling|class|component_size|compose|constrained|copy_sign|count|definite|delta|denorm|digits|exponent|external_tag|first|first_bit|floor|fore|fraction|identity|image|input|last|last_bit|leading_part|length|machine|machine_emax|machine_emin|machine_mantissa|machine_overflows|machine_radix|machine_rounding|machine_rounds|max|max_alignment_for_allocation|max_size_in_storage_elements|min|mod|model|model_emin|model_epsilon|model_mantissa|model_small|modulus|old|output|overlaps_storage|partition_id|pos|position|pred|priority|range|read|remainder|result|round|rounding|safe_first|safe_last|scale|scaling|signed_zeros|size|small|storage_pool|storage_size|stream_size|succ|tag|terminated|truncation|unbiased_rounding|unchecked_access|val|valid|value|version|wide_image|wide_value|wide_wide_image|wide_wide_value|wide_wide_width|wide_width|width|write)\\b"
				},
				{
					"name": "entity.other.attribute-name.ada",
					"match": "(?i)'(abort_signal|address_size|asm_input|asm_output|ast_entry|bit|bit_position|code_address|default_bit_order|elaborated|elab_body|elab_spec|emax|enabled|enum_rep|enum_val|epsilon|fixed_value|has_access_values|has_discriminants|img|integer_value|invalid_value|machine_size|max_interrupt_priority|max_priority|maximum_alignment|machanism_code|null_parameter|object_size|old|passed_by_reference|pool_address|range_length|storage_unit|stub_type|target_name|tick|to_address|type_class|uet_address|unconstrained_array|universal_literal_string|unrestricted_access|vads_size|value_size|wchar_t_size|word_size)\\b"
				},
				{
					"name": "invalid.deprecated.ada",
					"match": "(?i)'(emax|epsilon|large|mantissa|safe_emax|safe_large|safe_small)\\b"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.double-dash.ada",
					"match": "--.*$"
				},
				{
					"name": "comment.block.ada",
					"begin": "^\\s*--+\\s*$",
					"end": "^\\s*--+\\s*$",
					"patterns": [
						{
							"match": "--\\s*(\\w|\\s|_)+\\s*--",
							"captures": {
								"0": {
									"patterns": [
										{
											"name": "entity.name.section",
											"match": "\\b(\\w|\\s|_)*\\b"
										}
									]
								}
							}
						}
					]
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.ada",
					"match": "(?i)\\b(abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|or|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b"
				}
			]
		},
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.ada",
                    "match": "[()]"
                },
                {
                    "name": "punctuation.delimiter.ada",
                    "match": "=>"
                },
                {
                    "name": "punctuation.separator.ada",
                    "match": ","
                },
                {
                    "name": "punctuation.terminator.ada",
                    "match": ";"        
                }
            ]
		},
		"type": {
			"patterns": [
				{
					"name": "meta.type.declaration.ada",
					"begin": "(?i)\\btype\\s+(\\w|_)+\\s+is\\s+((abstract\\s+)?tagged\\s+)?(limited\\s+)?record\\b",
					"end": "(?i)\\bend\\s+record\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" },
								{
									"name": "storage.type.ada",
									"match": "\\b(\\w|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.ada",
					"match": "(?i)\\btype\\s+(\\w|_)+\\s+is\\s+new\\s+(\\w|\\.|_)+\\s+with\\s+null\\s+record;",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" },
								{
									"name": "storage.type.ada",
									"match": "\\b(\\w|\\.|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.ada",
					"begin": "(?i)\\btype\\s+(\\w|_)+\\s+is\\s+new\\s+(\\w|\\.|_)+\\s+with\\s+record\\b",
					"end": "(?i)\\bend\\s+record\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" },
								{
									"name": "storage.type.ada",
									"match": "\\b(\\w|\\.|_)+\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.type.declaration.ada",
					"begin": "(?i)\\btype\\b",
					"end": ";",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" }
							]
						}
					},
					"patterns": [
						{ "include": "#keyword" },
						{
							"name": "storage.type.ada",
							"match": "\\b(\\w|_)+\\b"
						}
					]
				}
			]
		},
		"value": {
			"patterns": [
				{
					"name": "constant.numeric.ada",
					"match": "[0-9]([0-9_]*[0-9])?(\\.[0-9]([0-9_]*[0-9])?)?"
				},
				{
					"name": "string.quoted.single.ada",
					"match": "'.'"
				},
				{
					"name": "string.quoted.double.ada",
					"begin": "\"",
					"end": "\""
				}
			]
		}
	},
	"scopeName": "source.ada"
}