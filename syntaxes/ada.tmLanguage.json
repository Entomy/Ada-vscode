{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ada",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#import" },
		{ "include": "#pragma" },
		{ "include": "#package-spec" },
		{ "include": "#package-body" },
		{ "include": "#procedure-body" },
		{ "include": "#function-body" }
	],
	"repository": {
		"aspect": {
			"name": "meta.aspect.ada",
			"match": "\\b(\\w|_)+(\\s*=>.*((?=,)|(?=;)|is))?",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "meta.aspect.definition.ada",
							"match": "=>.*",
							"captures": {
								"0": {
									"patterns": [
										{ "include": "#comment" },
										{ "include": "#delimiter" }
									]
								}
							}
						},
						{
							"name": "keyword.control.directive.ada",
							"match": "\\b(\\w|_)+\\b"
						}
					]
				}
			}
		},
		"aspect-spec": {
			"name": "meta.aspect.spec.ada",
			"begin": "(?i)\\bwith\\b",
			"end": "(?i)((?=;)|is)",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(with|is)\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#aspect" },
				{ "include": "#comment" },				
				{ "include": "#delimiter" }
			]
		},
		"attribute": {
			"name": "meta.attribute.ada",
			"match": "'(\\w|_)+\\b",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#delimiter" },
						{
							"name": "entity.other.attribute-name.ada",
							"match": "\\b(\\w|_)+\\b",
							"captures": {
								"0": {
									"patterns": [
										{ "include": "#underline" }
									]
								}
							}
						}
					]
				}
			}
		},
		"case": {
			"name": "meta.case.ada",
			"begin": "(?i)\\bcase\\s+(\\w|\\.|_)+\\s+is\\b",
			"end": "(?i)\\bend\\s+case\\s*;",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\b(end|is|case)\\b"
						},
						{
							"name": "variable.name.ada",
							"match": "\\b(\\w|\\.|_)+\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "meta.case.when.ada",
					"begin": "(?i)\\bwhen\\b",
					"end": "=>",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#delimiter" },
								{
									"name": "keyword.control.ada",
									"match": "(?i)\\bwhen\\b"
								}
							]
						}
					}
				}
			]
		},
		"section-comment": {
			"name": "comment.line.double-dash.ada",
			"match": "--[^-]+--\\s*$",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "entity.name.section",
							"match": "[^-]+"
						}
					]
				}
			}
		},
		"comment": {
			"name": "comment.line.double-dash.ada",
			"match": "--.*$",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "comment.block.documentation.gnatdoc",
							"match": "@.*$",
							"captures": {
								"0": {
									"patterns": [
										{
											"name": "entity.name.tag.gnatdoc",
											"match": "@\\w+",
											"captures": {
												"0": {
													"patterns": [
														{
															"name": "punctuation.definition.tag.gnatdoc",
															"match": "@"
														}
													]
												}
											}
										}
									]
								}
							}
						}
					]
				}
			}
		},
		"declaration": {
			"name": "meta.object.declaration.ada",
			"begin": "\\b(\\w|_)+\\s*(?=:)",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "variable.name.ada",
							"match": "\\b(\\w|_)+\\b"
						},
						{ "include": "#terminator" }
					]
				}
			},
			"patterns": [
				{
					"name": "meta.type.annotation.ada",
					"match": ":\\s*(aliased\\s+)?(constant\\s+)?(\\w|\\.|_)+('(\\w|_)+)?\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "storage.modifier.ada",
									"match": "(?i)\\b(aliased|constant)\\b"
								},
								{ "include": "#attribute" },
								{
									"name": "storage.type.ada",
									"match": "\\b(\\w|\\.|_)+\\b"
								},
								{
									"name": "punctuation.delimiter.ada",
									"match": ":"
								},
								{ "include": "#underline" }
							]
						}
					}
				},
				{
					"name": "meta.assignment.ada",
					"begin": ":=",
					"end": "(?=;)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "keyword.operator.assignment.ada",
									"match": ":="
								},
								{ "include": "#terminator" }
							]
						}
					},
					"patterns": [
						{ "include": "#expression" },
						{ "include": "#expression-parenthesis" }
					]
				}
			]
		},
		"declaration-block": {
			"name": "meta.declaration-block.ada",
			"begin": "(?i)\\b(declare|is)\\b",
			"end": "(?i)(?=begin)\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\bis\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#declaration" }
			]
		},
		"delimiter": {
			"name": "punctuation.delimiter.ada",
			"match": "(=>|\\||'|[()]|\\.|,)"
		},
		"execution-block": {
			"name": "meta.execution-block.ada",
			"begin": "(?i)\\bbegin\\b",
			"end": "(?i)(?=(end|exception))\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\bbegin\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#pragma" },
				{ "include": "#case" },
				{ "include": "#if" },
				{ "include": "#for-loop" },
				{ "include": "#while-loop" },
				{ "include": "#loop" },
				{ "include": "#return-statement" },
				{ "include": "#null-statement" }
			]
		},
		"exit": {
			"name": "meta.exit.ada",
			"begin": "(?i)\\bexit\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\bexit\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "meta.exit.when.ada",
					"begin": "(?i)\\bwhen\\b",
					"end": "(?=;)",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#keyword" },
								{
									"name": "keyword.ada",
									"match": "(?i)\\bwhen\\b"
								}
							]
						}
					}
				},
				{
					"name": "entity.name.label.ada",
					"match": "\\b(\\w|_)+\\b"
				}
			]
		},
		"expression": {
			"name": "meta.expression.ada",
			"begin": "[^;]",
			"end": "(?=;)",
			"patterns": [
				{ "include": "#expression-parenthesis" },
				{ "include": "#operator-highest" },
				{ "include": "#operator-unary" },
				{ "include": "#operator-logical" },
				{ "include": "#operator-relational" },
				{ "include": "#operator-multiplying" },
				{ "include": "#operator-adding" },
				{ "include": "#number" },
				{ "include": "#string" }
			]
		},
		"expression-condition": {
			"name": "meta.expression.ada",
			"begin": "(?i)(?<=if)",
			"end": "(?i)(?=then)",
			"patterns": [
				{ "include": "#expression-parenthesis" },
				{ "include": "#operator-highest" },
				{ "include": "#operator-unary" },
				{ "include": "#operator-logical" },
				{ "include": "#operator-relational" },
				{ "include": "#operator-multiplying" },
				{ "include": "#operator-adding" },
				{ "include": "#number" },
				{ "include": "#string" }
			]
		},
		"expression-parenthesis": {
			"name": "meta.expression.ada",
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{ "include": "#expression-parenthesis" },
				{ "include": "#operator-highest" },
				{ "include": "#operator-unary" },
				{ "include": "#operator-logical" },
				{ "include": "#operator-relational" },
				{ "include": "#operator-multiplying" },
				{ "include": "#operator-adding" },
				{ "include": "#number" },
				{ "include": "#string" }
			]
		},
		"function-instantiation": {
			"name": "meta.function.instantiation.ada",
			"begin": "(?i)\\bis\\s+new\\b",
			"end": "(?i)((?=;)|(?=with))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(is)\\b"
						},
						{
							"name": "keyword.modifier.unknown.ada",
							"match": "(?i)\\b(new)\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#generic-actual" },
				{
					"name": "entity.name.function.ada",
					"match": "\\b(\\w|\\.|_)+\\b"
				}
			]
		},
		"function-rename": {
			"name": "meta.function.rename.ada",
			"match": "(?i)\\brenames\\s(\\w|\\.|_)+('(\\w|_)+)?\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(renames)\\b"
						},
						{ "include": "#attribute" },
						{
							"name": "entity.name.function.ada",
							"match": "\\b(\\w|\\.|_)+\\b",
							"captures": {
								"0": {
									"patterns": [
										{ "include": "#delimiter" },
										{ "include": "#underline" }
									]
								}
							}
						}
					]
				}
			}
		},
		"function-return": {
			"name": "meta.return-type.ada",
			"match": "(?i)\\breturn\\s+(\\w|\\.|_)+('(\\w|_)+)?\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(return)\\b"
						},
						{ "include": "#attribute" },
						{
							"name": "entity.name.type.ada",
							"match": "\\b(\\w|\\.|_)+\\b",
							"captures": {
								"0": {
									"patterns": [
										{ "include": "#underline" }
									]
								}
							}
						}
					]
				}
			}
		},
		"function-body": {
			"name": "meta.function.body.ada",
			"begin": "(?i)\\bfunction\\s+((\\w|_)+)\\b",
			"end": "end\\s+(\\1);",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(end|function)\\b"
						},
						{
							"name": "entity.name.function.ada",
							"match": "\\b(\\w|_)+\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#declaration-block" },
				{ "include": "#execution-block" },
				{ "include": "#function-return" },
				{ "include": "#parameter-profile" }
			]
		},
		"function-spec": {
			"name": "meta.function.spec.ada",
			"begin": "(?i)\\bfunction\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(function)\\b"
						}		
					]
				}
			},
			"patterns": [
				{ "include": "#parameter-profile" },
				{ "include": "#function-instantiation" },
				{ "include": "#function-rename" },
				{ "include": "#function-return" },
				{ "include": "#aspect-spec" },
				{
					"name": "keyword.ada",
					"match": "\\b(is)\\b"	
				},
				{
					"name": "keyword.modifier.unknown.ada",
					"match": "\\b(abstract)\\b"	
				},
				{
					"name": "entity.name.function.ada",
					"match": "\\b(\\w|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#underline" }
							]
						}
					}
				},
				{ "include": "#terminator" }
			]
		},
		"generic-actual": {
			"name": "meta.generic.actual.ada",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.open.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.close.ada" }
			},
			"patterns": [
				{ "include": "#generic-association" }
			]
		},
		"generic-association": {
			"name": "meta.generic.association.ada",
			"match": "\\b(\\w|_)+(\\s*=>)?",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "entity.name.selector.ada",
							"match": "\\b(\\w|_)+\\s*=>",
							"captures": {
								"0": {
									"patterns": [
										{ "include": "#delimiter" }
									]
								}
							}
						},
						{
							"name": "meta.generic.parameter.ada",
							"match": ".*"
						}
					]
				}
			}
		},
		"generic-block": {
			"name": "meta.generic.block.ada",
			"begin": "(?i)\\bgeneric\\b",
			"end": "(?i)(?=(function|package|procedure)\\b)",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\bgeneric\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#type" }
			]
		},
		"if": {
			"name": "meta.if.ada",
			"begin": "(?i)\\bif\\b",
			"end": "(?i)\\bend\\s+if\\s*;",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\b(end|if)\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#if-condition" },
				{
					"name": "meta.if.elsif.ada",
					"begin": "(?i)\\belsif\\b",
					"end": "(?i)(?=(end|else|elsif))\\b",
					"captures": {
						"0": {
							"name": "keyword.control.ada"
						}
					},
					"patterns": [
						{ "include": "#if-condition" }
					]
				},
				{
					"name": "meta.if.else.ada",
					"begin": "(?i)\\belse\\b",
					"end": "(?i)(?=(end|else))\\b",
					"captures": {
						"0": {
							"name": "keyword.control.ada"
						}
					}
				}
			]
		},
		"if-condition": {
			"name": "meta.if.condition.ada",
			"begin": "(?i)(?<=if)",
			"end": "(?i)\\bthen\\b",
			"captures": {
				"0": {
					"name": "keyword.control.ada"
				}
			},
			"patterns": [
				{ "include": "#expression-condition" },
				{ "include": "#expression-parenthesis" }
			]
		},
		"import": {
			"name": "meta.import.package.ada",
			"begin": "(?i)\\b(use|with)\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(use|with)\\b"
						},
						{ "include": "#terminator" }
					]
				}
			},
			"patterns": [
				{ "include": "#delimiter" },
				{
					"name": "entity.name.package.ada",
					"match": "\\b(\\w|\\.|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#underline" },
								{ "include": "#delimiter" }
							]
						}
					}
				}
			]
		},
		"loop": {
			"name": "meta.loop.ada",
			"begin": "(?i)\\bloop\\b",
			"end": "(?i)\\bend\\s+loop\\s*;",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\b(end|loop)\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#exit" }
			]
		},
		"for-loop": {
			"name": "meta.loop.for.ada",
			"begin": "(?i)\\bfor\\b",
			"end": "(?i)\\bend\\s+loop\\s*;",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\b(end|for|loop)\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "meta.loop.for.in.ada",
					"begin": "(?i)\\bin\\b",
					"end": "(?i)\\bloop\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "keyword.control.ada",
									"match": "(?i)\\b(in|loop)\\b"
								}
							]
						}
					}
				},
				{
					"name": "meta.loop.for.of.ada",
					"begin": "(?i)\\bof\\b",
					"end": "(?i)\\bloop\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "keyword.control.ada",
									"match": "(?i)\\b(of|loop)\\b"
								}
							]
						}
					}	
				},
				{ "include": "#exit" }
			]
		},
		"while-loop": {
			"name": "meta.loop.while.ada",
			"begin": "(?i)\\bwhile\\b",
			"end": "(?i)\\bend\\s+loop\\s*;",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(end|loop|while)\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "meta.loop.while.ada",
					"begin": "(?i)\\b(?<=while)\\b",
					"end": "(?i)\\bloop\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "keyword.control.ada",
									"match": "(?i)\\bloop\\b"
								}
							]
						}
					}
				}
			]
		},
		"null-statement": {
			"name": "meta.statement.null.ada",
			"match": "(?i)\\bnull\\s*;",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.ada",
							"match": "(?i)\\bnull\\b"
						}
					]
				}
			}
		},
		"number": {
			"name": "constant.numeric.ada",
			"match": "(?<!\\w)([0-9]?[0-9]#[0-9A-F]+([0-9A-F_]*[0-9A-F])?(\\.[0-9A-F]([0-9A-F_]*[0-9A-F])?)?([eE][0-9]+)?#|[0-9]+([0-9_]+[0-9])?(\\.[0-9]([0-9_]+[0-9])?)?([eE][0-9]+)?)(?!\\w)",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "constant.numeric.base.ada",
							"match": "[0-9]?[0-9]#(?=\\d)"
						},
						{
							"name": "constant.numeric.base.ada",
							"match": "#"	
						},
						{
							"name": "punctuation.radix-point.ada",
							"match": "\\."
						},
						{
							"name": "punctuation.exponent-mark.ada",
							"match": "[eE]"
						},
						{ "include": "#underline" }
					]
				}
			}
		},
		"operator-adding": {
			"name": "keyword.operator.adding.ada",
			"match": "[&+-]"
		},
		"operator-highest": {
			"name": "keyword.operator.highest-precedence.ada",
			"match": "(\\*\\*|\\b(abs|not)\\b)"	
		},
		"operator-logical": {
			"name": "keyword.operator.logical.ada",
			"match": "\\b(and(\\s+then)?|or(\\s+else)?|xor)\\b"	
		},
		"operator-multiplying": {
			"name": "keyword.operator.multiplying.ada",
			"match": "(\\*|/|\\b(mod|rem)\\b)"
		},
		"operator-relational": {
			"name": "keyword.operator.relational.ada",
			"match": "(=|/=|<|<=|>|>=)"
		},
		"operator-unary": {
			"name": "keyword.operator.unary.ada",
			"match": "[+-](?=[0-9A-F])"
		},
		"package-spec": {
			"name": "meta.package.spec.ada",
			"begin": "(?i)package\\s+((\\w|\\.|_)+)\\s+(with.*)?is",
			"end": "(?i)end\\s+(\\1);",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(end|is|package)\\b"
						},
						{ "include": "#aspect-spec" },
						{ "include": "#terminator" }
					]
				}
			},
			"patterns": [
				{
					"name": "meta.package.spec.private.ada",
					"begin": "(?i)\\bprivate\\b",
					"end": "(?i)(?=end)",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "keyword.ada",
									"match": "(?i)\\bprivate\\b"
								}
							]
						}
					},
					"patterns": [
						{ "include": "#section-comment" },
						{ "include": "#comment" },
						{ "include": "#declaration" },
						{ "include": "#function-spec" },
						{ "include": "#procedure-spec" },
						{ "include": "#pragma" },
						{ "include": "#type" }
					]
				},
				{ "include": "#section-comment" },
				{ "include": "#comment" },
				{ "include": "#generic-block" },
				{ "include": "#declaration" },
				{ "include": "#function-spec" },
				{ "include": "#procedure-spec" },
				{ "include": "#pragma" },
				{ "include": "#subtype" },
				{ "include": "#type" }
			]
		},
		"package-body": {
			"name": "meta.package.body.ada",
			"begin": "(?i)package\\s+body\\s+((\\w|\\.|_)+)\\s+is",
			"end": "(?i)end\\s+(\\1)+;",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(body|end|is|package)\\b"
						},
						{ "include": "terminator" }
					]
				}	
			},
			"patterns": [
				{ "include": "#section-comment" },
				{ "include": "#comment" },
				{ "include": "#function-body" },
				{ "include": "#procedure-body" }
			]
		},
		"parameter": {
			"name": "meta.parameter.ada",
			"match": "\\b(\\w|_)+(\\s*,\\s*(\\w|_)+)?\\s*:\\s*(in\\s+)?(out\\s+)?(\\w|\\.|_)+\\b;?",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "meta.type.annotation.ada",
							"match": ":\\s*(in\\s+)?(out\\s+)?(\\w|\\.|_)+\\b",
							"captures": {
								"0": {
									"patterns": [
										{
											"name": "storage.modifier.ada",
											"match": "(?i)\\b(in|out)\\b"
										},
										{
											"name": "storage.type.ada",
											"match": "\\b(\\w|\\.|_)+\\b",
											"captures": {
												"0": {
													"patterns": [
														{ "include": "#underline" }
													]
												}
											}
										}
									]
								}
							}
						},
						{
							"name": "variable.parameter.ada",
							"match": "\\b(\\w|_)+\\b"
						},
						{ "include": "#delimiter" }
					]
				}
			}
		},
		"parameter-profile": {
			"name": "meta.parameter-profile.ada",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.open.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.close.ada" }
			},
			"patterns": [
				{ "include": "#parameter" }
			]
		},
		"pragma": {
			"name": "meta.pragma.ada",
			"begin": "(?i)\\bpragma\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\bpragma\\b"
						},
						{ "include": "#terminator" }
					]
				}
			},
			"patterns": [
				{
					"name": "meta.pragma.arguments.ada",
					"begin": "\\(",
					"end": "\\)",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#delimiter" }
							]
						}
					},
					"patterns": [
						{ "include": "#number" },
						{ "include": "#string" }
					]
				},
				{
					"name": "keyword.control.directive.ada",
					"match": "\\b(\\w|_)+\\b"	
				}
			]
		},
		"procedure-body": {
			"name": "meta.procedure.body.ada",
			"begin": "(?i)\\bprocedure\\s+((\\w|_)+)\\b",
			"end": "end\\s+(\\1);",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(end|procedure)\\b"
						},
						{
							"name": "entity.name.function.ada",
							"match": "\\b(\\w|_)+\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#declaration-block" },
				{ "include": "#execution-block" },
				{ "include": "#parameter-profile" }
			]
		},
		"procedure-spec": {
			"name": "meta.procedure.spec.ada",
			"begin": "(?i)\\bprocedure\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.ada",
							"match": "(?i)\\bprocedure\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#parameter-profile" },
				{ "include": "#function-instantiation" },
				{ "include": "#function-rename" },
				{ "include": "#aspect-spec" },
				{
					"name": "keyword.ada",
					"match": "\\b(is)\\b"	
				},
				{
					"name": "keyword.modifier.unknown.ada",
					"match": "\\b(abstract)\\b"	
				},
				{
					"name": "entity.name.function.ada",
					"match": "\\b(\\w|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#underline" }
							]
						}
					}
				},
				{ "include": "#terminator" }
			]
		},
		"return-statement": {
			"name": "meta.statement.return.ada",
			"begin": "(?i)\\breturn\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{ "include": "#terminator" },
						{
							"name": "keyword.control.ada",
							"match": "(?i)\\breturn\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#expression" }
			]
		},
		"string": {
			"name": "string.quoted.double.ada",
			"match": "\"(\\\\.|[^\"])*\"",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "punctuation.definition.string.ada",
							"match": "\""
						}
					]
				}
			}
		},
		"subtype": {
			"name": "meta.type.declaration.subtype.ada",
			"begin": "(?i)\\bsubtype\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\bsubtype\\b"
						},
						{ "include": "#terminator" }
					]
				}
			},
			"patterns": [
				{ "include": "#aspect-spec" },
				{ "include": "#type-range" },
				{
					"match": "(?i)\\b(\\w|_)+\\s+is\\s+(\\w|\\.|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "keyword.ada",
									"match": "(?i)\\bis\\b"
								},
								{
									"name": "storage.type.ada",
									"match": "\\b(\\w|\\.|_)+\\b"
								}
							]	
						}
					}
				}
			]
		},
		"terminator": {
			"name": "punctuation.terminator.ada",
			"match": ";"
		},
		"type": {
			"name": "meta.type.declaration.ada",
			"begin": "(?i)\\btype\\b",
			"end": ";",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\btype\\b"
						},
						{ "include": "#terminator" }
					]
				}
			},
			"patterns": [
				{
					"name": "keyword.ada",
					"match": "(?i)\\bis\\b"
				},
				{
					"name": "storage.visibility.ada",
					"match": "(?i)\\bprivate\\b"	
				},
				{ "include": "#type-access" },
				{ "include": "#type-inheritance" },
				{ "include": "#type-array" },
				{ "include": "#type-range" },
				{ "include": "#type-modulus" },
				{ "include": "#type-delta" },
				{ "include": "#type-digits" },
				{ "include": "#type-record-null" },
				{ "include": "#type-record" },
				{ "include": "#type-interface" },
				{ "include": "#aspect-spec" },
				{
					"name": "entity.name.type.ada",
					"match": "\\b(\\w|_)+\\b"
				}
			]
		},
		"type-access": {
			"name": "meta.type.declaration.access.ada",
			"begin": "(?i)\\baccess\\b",
			"end": "(?i)(?=(with|;))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\baccess\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "storage.modifier.ada",
					"match": "(?i)\\b(all|constant)\\b"
				},
				{
					"name": "storage.type.ada",
					"match": "\\b(\\w|\\.|_)+\\b"
				}
			]
		},
		"type-array": {
			"name": "meta.type.declaration.array.ada",
			"begin": "(?i)\\barray\\b",
			"end": "(?i)(?=(with|;))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\barray\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "meta.type.declaration.array.indices.ada",
					"begin": "\\(",
					"end": "\\)",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#delimiter" }
							]
						}
					},
					"patterns": [
						{
							"name": "meta.type.declaration.array.index.ada",
							"begin": "\\b(\\w|_)+\\b",
							"end": "(?=[,)])",
							"captures": {
								"0": {
									"patterns": [
										{
											"name": "storage.type.ada",
											"match": "\\b(\\w|_)+\\b"
										}
									]
								}
							},
							"patterns": [
								{
									"name": "storage.modifier.ada",
									"match": "(?i)\\brange\\b"
								},
								{
									"name": "keyword.modifier.unknown.ada",
									"match": "<>"
								},
								{ "include": "#number" },
								{ "include": "#delimiter" }
							]
						}
					]
				},
				{
					"name": "storage.modifier.ada",
					"match": "(?i)\\bof\\b"
				},
				{
					"name": "storage.type.ada",
					"match": "\\b(\\w|\\.|_)+\\b"
				}
			]
		},
		"type-delta": {
			"name": "meta.type.declaration.delta.ada",
			"begin": "(?i)\\bdelta\\b",
			"end": "(?i)(?=(digits|range|with|;))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\bdelta\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#attribute" },
				{ "include": "#number" },
				{ "include": "#delimiter" }
			]
		},
		"type-digits": {
			"name": "meta.type.declaration.digits.ada",
			"begin": "(?i)\\bdigits\\b",
			"end": "(?i)(?=(range|with|;))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\bdigits\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#attribute" },
				{ "include": "#number" },
				{ "include": "#delimiter" }
			]
		},
		"type-discriminant": {
			"name": "meta.type.discriminant.ada",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "punctuation.paren.open.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.paren.close.ada" }
			}
		},
		"type-inheritance": {
			"name": "meta.type.declaration.inheritance.ada",
			"begin": "(?i)\\bnew\\b",
			"end": "(?i)(with)",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\b(new|with)\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "keyword.ada",
					"match": "(?i)\\band\\b"
				},
				{
					"name": "storage.type.ada",
					"match": "\\b(\\w|\\.|_)+\\b",
					"captures": {
						"0": {
							"patterns": [
								{ "include": "#delimiter" },
								{ "include": "#underline" }
							]
						}
					}
				}
			]
		},
		"type-interface": {
			"name": "meta.type.declaration.interface.ada",
			"begin": "(?i)\\b(limited|task|protected|synchronized)?interface\\b",
			"end": "(?=;)",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\b(limited|task|protected|synchronized|interface)\\b"
						}
					]
				}
			},
			"patterns": [
				{
					"name": "keyword.ada",
					"match": "(?i)\\band\\b"
				},
				{
					"name": "storage.type.ada",
					"match": "\\b(\\w|\\.|_)+\\b"
				}
			]
		},
		"type-modulus": {
			"name": "meta.type.declaration.modulus.ada",
			"begin": "(?i)\\bmod\\b",
			"end": "(?i)(?=(with|;))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\bmod\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#attribute" },
				{ "include": "#number" },
				{ "include": "#delimiter" }
			]
		},
		"type-range": {
			"name": "meta.type.declaration.range.ada",
			"begin": "(?i)\\brange\\b",
			"end": "(?i)(?=(with|;))",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\brange\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#attribute" },
				{ "include": "#number" },
				{ "include": "#delimiter" }
			]
		},
		"type-record-null": {
			"name": "meta.type.declaration.record.ada",
			"match": "(?i)\\b((abstract\\s+)?tagged\\s+)?(limited\\s+)?null\\s+record\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\b(abstract|tagged|limited|null|record)\\b"
						}
					]
				}
			}
		},
		"type-record": {
			"name": "meta.type.declaration.record.ada",
			"begin": "(?i)\\b((abstract\\s+)?tagged\\s+)?(limited\\s+)?record\\b",
			"end": "(?i)\\bend\\s+record\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.ada",
							"match": "(?i)\\bend\\s+record\\b"
						},
						{
							"name": "storage.modifier.ada",
							"match": "(?i)\\b(abstract|limited|tagged|record)\\b"
						}
					]
				}
			},
			"patterns": [
				{ "include": "#declaration" }
			]
		},
		"underline": {
			"name": "punctuation.underline.ada",
			"match": "_"
		}
	},
	"scopeName": "source.ada"
}