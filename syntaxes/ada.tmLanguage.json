{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ada",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#pragma" },
		{ "include": "#with_clause" },
		{ "include": "#use_clause" },
		{ "include": "#package_declaration" }
	],
	"repository": {
		"array_type_definition": {
			"name": "meta.declaration.type.definition.array.ada",
			"patterns": [
				{ "include": "#unconstrained_array_definition" },
				{ "include": "#constrained_array_definition" },
				{ "include": "#component_definition" }
			]
		},
		"aspect_definition": {
			"name": "meta.aspect.definition.ada",
			"begin": "=>",
			"end": "(?i)\\b(?=(,|;|is))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.other.ada" }
			},
			"patterns": [
				{ "include": "#name" },
				{ "include": "#expression" }
			]
		},
		"aspect_mark": {
			"name": "meta.aspect.mark.ada",
			"match": "(?i)\\b((\\w|\\d|\\.|_)+)((')(class))?\\b",
			"captures": {
				"1": { "name": "keyword.control.directive.ada" },
				"4": { "name": "punctuation.ada" },
				"5": { "name": "entity.other.attribute-name.ada" }
			}
		},
		"aspect_specification": {
			"name": "meta.aspect.specification.ada",
			"begin": "(?i)\\bwith\\b",
			"end": "(?i)\\b(?=(;|is))\\b",
			"beginCaptures": {
				"0": { "name": "keyword.ada" }
			},
			"patterns": [
				{
					"name": "punctation.ada",
					"match": ","
				},
				{ "include": "#aspect_definition" },
				{ "include": "#aspect_mark" }
			]
		},
		"based_literal": {
			"name": "constant.numeric.ada",
			"match": "(?i)(\\d(_?\\d)*#)[0-9a-f](_?[0-9a-f])*(\\.[0-9a-f](_?[0-9a-f])*)?(#)([eE](\\+|\\-)?\\d(_?\\d)*)?",
			"captures": {
				"1": {
					"name": "constant.numeric.base.ada"
				},
				"4": {
					"patterns": [
						{
							"name": "punctuation.radix-point.ada",
							"match": "\\."
						}
					]
				},
				"6": {
					"name": "constant.numeric.base.ada"
				},
				"7": {
					"patterns": [
						{
							"name": "punctuation.exponent-mark.ada",
							"match": "[eE]"
						}
					]
				}
			}
		},
		"basic_declaration": {
			"name": "meta.declaration.ada",
			"patterns": [
				{ "include": "#type_declaration" },
				{ "include": "#subtype_declaration" },
				{ "include": "#object_declaration" },
				{ "include": "#number_declaration" },
				{ "include": "#subprogram_declaration" },
				{ "include": "#abstract_subprogram_declaration" },
				{ "include": "#null_procedure_declaration" },
				{ "include": "#expression_function_declaration" },
				{ "include": "#package_declaration" },
				{ "include": "#renaming_declaration" },
				{ "include": "#exception_declaration" },
				{ "include": "#generic_declaration" },
				{ "include": "#generic_instantiation" }
			]
		},
		"basic_declarative_item": {
			"name": "meta.declaration.item",
			"patterns": [
				{ "include": "#use_clause" },
				{ "include": "#basic_declaration" },
				{ "include": "#aspect_clause" }
			]
		},
		"binary_adding_operator": {
			"name": "meta.operator.adding.binary.ada",
			"match": "(\\+|-|&)",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"character_literal": {
			"name": "string.quoted.single.ada",
			"match": "'.'",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "punctuation.definition.string.ada",
							"match": "'"
						}
					]
				}
			}
		},
		"comment": {
			"name": "comment.line.double-dash.ada",
			"match": "--.*$"
		},
		"component_definition": {
			"name": "meta.declaration.type.definition.component.ada",
			"begin": "(?i)\\bof\\b",
			"end": "(?i)(?=(;|with))",
			"beginCaptures": {
				"0": { "name": "keyword.ada" }
			},
			"patterns": [
				{
					"name": "storage.modifier.ada",
					"match": "(?i)\\baliased\\b"
				},
				{ "include": "#subtype_indication" },
				{ "include": "#access_definition" }
			]
		},
		"composite_constraint": {
			"name": "meta.constraint.composite.ada",
			"patterns": [
				{ "include": "#index_constraint" },
				{ "include": "#discriminant_constraint" }
			]
		},
		"constraint": {
			"name": "meta.constraint.ada",
			"patterns": [
				{ "include": "#scalar_constraint" },
				{ "include": "#composite_constraint" }
			]
		},
		"decimal_literal": {
			"name": "constant.numeric.ada",
			"match": "\\d(_?\\d)*(\\.\\d(_?\\d)*)?([eE](\\+|\\-)?\\d(_?\\d)*)?",
			"captures": {
				"2": {
					"patterns": [
						{
							"name": "punctuation.radix-point.ada",
							"match": "\\."
						}
					]
				},
				"4": {
					"patterns": [
						{
							"name": "punctuation.exponent-mark.ada",
							"match": "[eE]"
						}
					]
				}
			}
		},
		"default_expression": {
			"name": "meta.default.expression.ada",
			"patterns": [
				{ "include": "#expression" }
			]
		},
		"default_name": {
			"name": "meta.default.name.ada",
			"patterns": [
				{ "include": "#name" }
			]
		},
		"defining_character_literal": {
			"patterns": [
				{ "include": "#character_literal" }
			]
		},
		"defining_identifier": {
			"name": "meta.defining-identifier.ada",
			"patterns": [
				{ "include": "#identifier" }
			]
		},
		"defining_identifier_list": {
			"name": "meta.defining-identifier.list.ada",
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#defining_identifier" }
			]
		},
		"delta_constraint": {
			"name": "meta.constraint.delta.ada",
			"begin": "(?i)\\bdelta\\b",
			"end": "(?i)(?=(;|digits|range|with))\\b",
			"beginCaptures": {
				"0": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#simple_expression" }
			]
		},
		"discrete_choice": {
			"name": "meta.choice.discrete.ada",
			"patterns": [
				{ "include": "#choice_expression" },
				{ "include": "#subtype_indication" },
				{ "include": "#range" }
			]
		},
		"discrete_choice_list": {
			"name": "meta.list.discrete-choice.ada",
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": "\\|"
				},
				{ "include": "#discrete_choice" }
			]
		},
		"discrete_range": {
			"name": "meta.range.discrete.ada",
			"patterns": [
				{ "include": "#subtype_indiciation" },
				{ "include": "#range" }
			]
		},
		"discriminant_association": {
			"name": "meta.constraint.discriminant.association.ada",
			"patterns": [
				{ "include": "#selecting_discriminant_association" },
				{ "include": "#simple_discriminant_association" }
			]
		},
		"discriminant_constraint": {
			"name": "meta.constraint.discriminant.ada",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#discriminant_association" }
			]
		},
		"digits_constraint": {
			"name": "meta.constraint.digits.ada",
			"begin": "(?i)\\bdigits\\b",
			"end": "(?i)(?=(;|range|with))\\b",
			"beginCaptures": {
				"0": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#simple_expression" }
			]
		},
		"enumeration_literal_specification": {
			"patterns": [
				{ "include": "#defining_identifier" },
				{ "include": "#defining_character_literal" }
			]
		},
		"enumeration_type_definition": {
			"name": "meta.declaration.type.definition.enumeration.ada",
			"begin": "(?i)\\b(is)\\s+(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "punctuation.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				}
			]
		},
		"explicit_dereference": {
			"name": "meta.dereference.explicit.ada",
			"match": "(?i)\\b((\\w|\\d|\\.|_)+)(\\.)(all)\\b",
			"captures": {
				"1": { "patterns": [ { "include": "#name" } ] },
				"3": { "name": "punctuation.ada" },
				"4": { "name": "keyword.ada" }
			}
		},
		"expression": {
			"name": "meta.expression.ada",
			"patterns": [
				{ "include": "#simple_expression" }
			]
		},
		"fixed_point_definition": {
			"name": "meta.declaration.type.definition.real.fixed-point.ada",
			"begin": "(?i)\\b(is)\\s+(delta)\\b",
			"end": "(?i)(?=(;|with))",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#digits_constraint" },
				{ "include": "#range_constraint" },
				{ "include": "#simple_expression" }
			]
		},
		"floating_point_definition": {
			"name": "meta.declaration.type.definition.real.floating-point.ada",
			"begin": "(?i)\\b(is)\\s+(digits)\\b",
			"end": "(?i)(?=(;|with))",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#range_constraint" },
				{ "include": "#simple_expression" }
			]
		},
		"full_type_declaration": {
			"patterns": [
				{ "include": "#regular_type_declaration" },
				{ "include": "#task_type_declaration" },
				{ "include": "#protected_type_declaration" }
			]
		},
		"general_access_modifier": {
			"name": "meta.access.modifier.ada",
			"match": "(?i)\\b(all|constant)\\b",
			"captures": {
				"0": { "name": "storage.modifier.ada" }
			}
		},
		"goto_statement": {
			"name": "meta.statement.goto.ada",
			"begin": "(?i)\\bgoto\\b",
			"end": ";",
			"beginCaptures": {
				"0": { "name": "keyword.control.goto.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "entity.name.label.ada",
					"match": "\\b(\\w|\\d|\\.|_)+\\b"
				}
			]
		},
		"highest_precedence_operator": {
			"name": "meta.operator.highest-precedence.ada",
			"match": "(?i)\\b(\\*\\*|abs|not)\\b",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"identifier": {
			"name": "meta.identifier.ada",
			"match": "(\\w|\\d|_)+"
		},
		"implicit_dereference": {
			"name": "meta.dereference.implicit.ada",
			"patterns": [
				{ "include": "#name" }
			]
		},
		"interface_list": {
			"name": "meta.declaration.type.interface.list.ada",
			"patterns": [
				{
					"name": "storage.modifier.ada",
					"match": "(?i)\\band\\b"
				},
				{ "include": "#subtype_mark" }
			]
		},
		"interface_type_definition": {
			"name": "meta.declaration.type.definition.interface.ada",
			"begin": "(?i)\\b(is)\\s+((limited|task|protected|synchronized)\\s+)?(interface)\\b",
			"end": "(?=;)",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"3": { "name": "storage.modifier.ada" },
				"4": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#interface_list" }
			]
		},
		"index_constraint": {
			"name": "meta.constraint.index.ada",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#discrete_range" }
			]
		},
		"index_subtype_definition": {
			"name": "meta.declaration.type.definition.array.index-subtype.ada",
			"begin": "\\b(\\w|\\d|\\.|_)+\\b",
			"end": "\\<\\>",
			"beginCaptures": {
				"0": { "patterns": [ { "include": "#subtype_mark" } ] }
			},
			"endCaptures": {
				"0": { "name": "keyword.operator.unknown.ada" }
			},
			"patterns": [
				{
					"name": "storage.modifier.ada",
					"match": "(?i)\\brange\\b"
				}
			]
		},
		"integer_type_definition": {
			"name": "meta.declaration.type.definition.integer.ada",
			"patterns": [
				{ "include": "#signed_integer_type_definition" },
				{ "include": "#modular_type_definition" }
			]
		},
		"label": {
			"name": "meta.label.ada",
			"match": "<<((\\w|\\d|\\.|_)+)>>",
			"captures": {
				"1": { "name": "entity.name.label.ada" },
				"0": { "name": "punctuation.label.ada" }
			}
		},
		"limited_with_clause": {
			"name": "meta.context.with.limited.ada",
			"begin": "(?i)\\b(limited)\\s+((private)\\s+)?(with)\\b",
			"end": ";",
			"beginCaptures": {
				"1": { "name": "keyword.modifier.ada" },
				"3": { "name": "storage.visibility.ada" },
				"4": { "name": "keyword.other.using.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#name" }
			]
		},
		"logical_operator": {
			"name": "meta.operator.logical.ada",
			"match": "(?i)\\b(and|or|xor)\\b",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"mode": {
			"name": "meta.parameter.mode.ada",
			"match": "(?i)\\b(in\\s+out|in|out)?\\b",
			"captures": {
				"0": { "name": "keyword.ada" }
			}
		},
		"modular_type_definition": {
			"name": "meta.declaration.type.definition.integer.modular.ada",
			"begin": "(?i)\\b(is)\\s+(mod)\\b",
			"end": "(?i)(?=(;|with))",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#simple_expression" }
			]
		},
		"multiplying_operator": {
			"name": "meta.operator.multiplying.ada",
			"match": "(?i)\\b(\\*|/|mod|rem)\\b",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"nonlimited_with_clause": {
			"name": "meta.context.with.nonlimited.ada",
			"begin": "(?i)\\b((private)\\s+)?(with)\\b",
			"end": ";",
			"beginCaptures": {
				"2": { "name": "storage.visibility.ada" },
				"3": { "name": "keyword.other.using.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#name" }
			]
		},
		"null_exclusion": {
			"name": "meta.null_exclusion.ada",
			"match": "(?i)\\b(not\\s+null)\\b",
			"captures": {
				"0": { "name": "storage.modifier.ada" }
			}
		},
		"null_statement": {
			"name": "meta.statement.null.ada",
			"match": "(?i)\\b(null)(;)",
			"captures": {
				"1": { "name": "keyword.control.ada" },
				"2": { "name": "punctuation.ada" }
			}
		},
		"numeric_literal": {
			"name": "meta.literal.numeric.ada",
			"patterns": [
				{ "include": "#based_literal" },
				{ "include": "#decimal_literal" }
			]
		},
		"operator_symbol": {
			"name": "meta.operator-symbol.ada",
			"match": "(?i)\"(and|or|xor|mod|rem|abs|not|=|/=|<|<=|>|>=|\\+|-|&|\\*\\*|\\*|/)\"",
			"captures": {
				"1": { "name": "keyword.operator.ada" },
				"0": { "name": "string.quoted.double.ada" }
			}
		},
		"overriding_indicator": {
			"name": "meta.overriding-indicator.ada",
			"match": "(?i)\\b((not)\\s+)?(overriding)\\b",
			"captures": {
				"2": { "name": "keyword.modifier.ada" },
				"3": { "name": "keyword.modifier.ada" }
			}
		},
		"package_declaration": {
			"name": "meta.declaration.package.ada",
			"patterns": [
				{ "include": "#package_specification" }
			]
		},
		"package_specification": {
			"name": "meta.declaration.package.specification.ada",
			"begin": "(?i)\\b(package)\\s+((\\w|\\d|\\.|_)+)\\b",
			"end": "(?i)\\b(end)\\s+(\\2)(;)",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "entity.name.package.ada" }
			},
			"endCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "entity.name.package.ada" },
				"3": { "name": "punctuation.ada" }
			},
			"patterns": [
				{ "include": "#basic_declarative_item" },
				{ "include": "#aspect_specification" },
				{
					"name": "keyword.ada",
					"match": "(?i)\\bis\\b"
				},
				{
					"name": "storage.visibility.ada",
					"match": "(?i)\\bprivate\\b"
				}
			]
		},
		"parent_unit_name": {
			"name": "meta.name.parent-unit.ada",
			"patterns": [
				{ "include": "#name" }
			]
		},
		"pragma": {
			"name": "meta.pragma.ada",
			"begin": "(?i)\\b(pragma)\\s+((?:\\w|\\d|_)+)\\b",
			"end": ";",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "keyword.control.directive.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{ "include": "#pragma_arguments" }
			]
		},
		"pragma_arguments": {
			"name": "meta.pragma.arguments.ada",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#pragma_argument_association" }
			]
		},
		"pragma_argument_association": {
			"name": "meta.pragma.argument.association.ada",
			"patterns": [
				{ "include": "#expression" },
				{ "include": "#identifier" }
			]
		},
		"primary":{
			"name": "meta.expression.primary.ada",
			"patterns": [
				{ "include": "#numeric_literal" },
				{
					"name": "keyword.ada",
					"match": "(?i)\\bnull\\b"
				},
				{ "include": "#string_literal" },
				{ "include": "#aggregate" },
				{ "include": "#name" },
				{ "include": "#allocator" },
				{
					"begin": "\\(",
					"end": "\\)",
					"captures": {
						"0": { "name": "punctuation.ada" }
					},
					"patterns": [
						{ "include": "#expression" },
						{ "include": "#conditional_expression" },
						{ "include": "#quantified_expression" }
					]
				}
			]
		},
		"quantifier": {
			"name": "meta.expression.quantifier.ada",
			"match": "(?i)\\b(some|all)\\b",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"raise_statement": {
			"name": "meta.statement.raise.ada",
			"begin": "(?i)\\braise\\b",
			"end": ";",
			"beginCaptures": {
				"0": { "name": "keyword.control.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "meta.statement.raise.message.ada",
					"begin": "(?i)\\bwith\\b",
					"end": "(?=;)",
					"beginCaptures": {
						"0": { "name": "keyword.control.ada" }
					},
					"patterns": [
						{ "include": "#expression" }
					]
				},
				{
					"name": "entity.name.exception.ada",
					"match": "\\b(\\w|\\d|\\.|_)+\\b"
				}
			]
		},
		"range": {
			"name": "meta.range.ada",
			"begin": "(?=.)",
			"end": "(?i)(?=(;|with|=>|\\|))",
			"patterns": [
				{
					"name": "keyword.operator.ada",
					"match": "\\.\\."
				},
				{ "include": "#simple_expression" }
			]
		},
		"range_constraint": {
			"name": "meta.constraint.range.ada",
			"begin": "(?i)\\brange\\b",
			"end": "(?i)(?=(;|with))",
			"beginCaptures": {
				"0": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#range" }
			]
		},
		"real_type_definition": {
			"name": "meta.declaration.type.definition.real.ada",
			"patterns": [
				{ "include": "#floating_point_definition" },
				{ "include": "#fixed_point_definition" }
			]
		},
		"record_type_definition": {
			"patterns": [
				{
					"name": "meta.declaration.type.definition.record.null.ada",
					"match": "(?i)\\b(is)\\s+((abstract\\s+)?(tagged)\\s+)?(limited\\s+)?(null)\\s+(record)\\s*(;)",
					"captures": {
						"1": { "name": "keyword.ada" },
						"2": { "name": "storage.modifier.ada" },
						"5": { "name": "storage.modifier.ada" },
						"6": { "name": "storage.modifier.ada" },
						"7": { "name": "storage.modifier.ada" },
						"8": { "name": "punctuation.ada" }
					}
				},
				{
					"name": "meta.declaration.type.definition.record.ada",
					"begin": "(?i)\\b(is)\\s+((abstract\\s+)?(tagged)\\s+)?(limited\\s+)?(record)\\b",
					"end": "(?i)\\b(end)\\s+(record)\\s*(;)",
					"beginCaptures": {
						"1": { "name": "keyword.ada" },
						"2": { "name": "storage.modifier.ada" },
						"5": { "name": "storage.modifier.ada" },
						"6": { "name": "storage.modifier.ada" }
					},
					"endCaptures": {
						"1": { "name": "keyword.ada" },
						"2": { "name": "storage.modifier.ada" },
						"3": { "name": "punctuation.ada" }
					},
					"patterns": [
						{ "include": "#variant_part" }
					]
				}
			]
		},
		"regular_type_declaration": {
			"begin": "(?i)\\b(type)\\s+((?:\\w|\\d|_)+)\\b",
			"end": ";",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.type.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{ "include": "#aspect_specification" },
				{ "include": "#type_definition" }
			]
		},
		"relational_operator": {
			"name": "meta.operator.relational.ada",
			"match": "(=|/=|<|<=|>|>=)",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"scalar_constraint": {
			"name": "meta.constraint.scalar.ada",
			"patterns": [
				{ "include": "#range_constraint" },
				{ "include": "#digits_constraint" },
				{ "include": "#delta_constraint" }
			]
		},
		"selecting_discriminant_association": {
			"patterns": [
				{
					"name": "meta.constraint.discriminant.association.definition.ada",
					"begin": "=>",
					"end": "(?=(,|\\)))",
					"beginCaptures": {
						"0": { "name": "keyword.other.ada" }
					},
					"patterns": [
						{ "include": "#expression" }
					]
				},
				{
					"name": "punctuation.ada",
					"match": "[|]"
				},
				{
					"name": "meta.constraint.discriminant.association.selector.ada",
					"patterns": [
						{ "include": "#name" }
					]
				}
			]
		},
		"signed_integer_type_definition": {
			"name": "meta.declaration.type.definition.integer.signed.ada",
			"begin": "(?i)\\b(is)\\s+(range)\\b",
			"end": "(?i)(?=(;|with))",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.modifier.ada" }
			},
			"patterns": [
				{ "include": "#range" }
			]
		},
		"simple_discriminant_association": {
			"patterns": [
				{ "include": "#expression" }
			]
		},
		"simple_expression": {
			"name": "meta.expression.simple.ada",
			"patterns": [
				{ "include": "#numeric_literal" }
			]
		},
		"simple_return_statement": {
			"name": "meta.statement.return.simple.ada",
			"begin": "(?i)\\breturn\\b",
			"end": ";",
			"beginCaptures": { 
				"0": { "name": "keyword.control.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{ "include": "#expression" }
			]
		},
		"string_literal": {
			"name": "string.quoted.double.ada",
			"match": "(\").*?(\")",
			"captures": {
				"1": {
					"name": "punctuation.definition.string.ada"
				},
				"2": {
					"name": "punctuation.definition.string.ada"
				}
			}
		},
		"subpool_specification": {
			"name": "meta.storage-pool.subpool.specification.ada",
			"match": "(\\()((\\w|\\d|\\.|_)+)(\\))",
			"captures": {
				"1": { "name": "punctuation.ada" },
				"2": { "patterns": [ { "include": "#name" } ] },
				"4": { "name": "punctuation.ada" }
			}
		},
		"subprogram_default": {
			"name": "meta.default.subprogram.ada",
			"match": "(?i)\\b((\\w|\\d|\\.|_)+|<>|null)\\b",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "keyword.other.null.ada",
							"match": "(?i)\\bnull\\b"
						},
						{
							"name": "keyword.modifier.unknown.ada",
							"match": "<>"
						},
						{ "include": "#default_name" }
					]
				}
			}
		},
		"subtype_declaration": {
			"name": "meta.declaration.subtype.ada",
			"begin": "(?i)\\b(subtype)\\s+((\\w|\\d|\\.|_)+)\\b",
			"end": ";",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.type.ada" }
			},
			"patterns": [
				{
					"begin": "(?i)\\bis\\b",
					"end": "(?i)\\b(?=(;|with))\\b",
					"beginCaptures": {
						"0": { "name": "keyword.ada" }
					},
					"patterns": [
						{ "include": "#subtype_indication" }
					]
				},
				{ "include": "#aspect_specification" }
			]
		},
		"subtype_indication": {
			"name": "meta.declaration.subtype.indication.ada",
			"begin": "(?i)\\b(null\\s+)?((\\w|\\d|\\.|_)+)\\b",
			"end": "(?i)\\b(?=(;|with))\\b",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "patterns": [ { "include": "#subtype_mark" } ] }
			},
			"patterns": [
				{ "include": "#constraint" }
			]
		},
		"subtype_mark": {
			"name": "meta.subtype-mark.ada",
			"match": "\\b(\\w|\\d|\\.|_)+\\b",
			"captures": {
				"0": {
					"name": "storage.type.ada"
				}
			}
		},
		"terminate_alternative": {
			"name": "meta.tasking.terminate_alternative.ada",
			"match": "(?i)\\b(terminate)\\s*(;)",
			"captures": {
				"1": { "name": "keyword.control.ada" },
				"2": { "name": "punctuation.ada" }
			}
		},
		"type_declaration": {
			"name": "meta.declaration.type.ada",
			"patterns": [
				{ "include": "#full_type_declaration" },
				{ "include": "#incomplete_type_declaration" },
				{ "include": "#private_type_declaration" },
				{ "include": "#private_extension_declaration" }
			]
		},
		"type_definition": {
			"name": "meta.declaration.type.definition.ada",
			"patterns": [
				{ "include": "#enumeration_type_definition" },
				{ "include": "#integer_type_definition" },
				{ "include": "#real_type_definition" },
				{ "include": "#array_type_definition" },
				{ "include": "#record_type_definition" },
				{ "include": "#access_type_definition" },
				{ "include": "#derived_type_definition" },
				{ "include": "#interface_type_definition" }
			]
		},
		"unary_adding_operator": {
			"name": "meta.operator.adding.unary.ada",
			"match": "(\\+|-)",
			"captures": {
				"0": { "name": "keyword.operator.ada" }
			}
		},
		"unconstrained_array_definition": {
			"name": "meta.declaration.type.definition.array.unconstrained.ada",
			"begin": "(?i)\\b(is)\\s+(array)\\s*(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "keyword.ada" },
				"2": { "name": "storage.modifier.ada" },
				"3": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#index_subtype_definition" }
			]
		},
		"unknown_discriminant_part": {
			"name": "meta.discriminant.part.unknown.ada",
			"match": "\\((<>)\\)",
			"captures": {
				"1": { "name": "keyword.modifier.unknown.ada" },
				"0": { "name": "punctuation.ada" }
			}
		},
		"use_clause": {
			"name": "meta.context.use.ada",
			"patterns": [
				{ "include": "#use_type_clause" },
				{ "include": "#use_package_clause" }
			]
		},
		"use_package_clause": {
			"name": "meta.context.use.package.ada",
			"begin": "(?i)\\buse\\b",
			"end": ";",
			"beginCaptures": {
				"0": { "name": "keyword.other.using.ada" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#name" }
			]
		},
		"use_type_clause": {
			"name": "meta.context.use.type.ada",
			"begin": "(?i)\\b(use)\\s+((all)\\s+)?(type)\\b",
			"end": ";",
			"beginCaptures": {
				"1": { "name": "keyword.other.using.ada" },
				"3": { "name": "keyword.modifier.ada" },
				"4": { "name": "keyword.modifier.ada"  }
			},
			"endCaptures": {
				"0": { "name": "punctuation.ada" }
			},
			"patterns": [
				{
					"name": "punctuation.ada",
					"match": ","
				},
				{ "include": "#subtype_mark" }
			]
		},
		"variant": {
			"name": "meta.variant.ada",
			"patterns": [
				{
					"match": "(?i)\\b(when)\\s+(others)\\s*(=>)",
					"captures": {
						"1": { "name": "keyword.control.ada" },
						"2": { "name": "keyword.ada" },
						"3": { "name": "punctuation.ada" }
					}
				},
				{
					"begin": "(?i)\\bwhen\\b",
					"end": "=>",
					"beginCaptures": {
						"0": { "name": "keyword.control.ada" }
					},
					"endCaptures": {
						"0": { "name": "punctuation.ada" }
					},
					"patterns": [
						{ "include": "#discrete_choice_list" }
					]
				}
			]
		},
		"variant_part": {
			"name": "meta.declaration.type.definition.record.variant.ada",
			"begin": "(?i)\\bcase\\b",
			"end": "(?i)\\b(end)\\s+(case)\\s*(;)",
			"beginCaptures": {
				"0": { "name": "storage.modifier.ada" }
			},
			"endCaptures": {
				"1": { "name": "keyword.control.ada" },
				"2": { "name": "storage.modifier.ada" },
				"3": { "name": "punctuation.ada" }
			},
			"patterns": [
				{ "include": "#variant" },
				{
					"name": "keyword.control.ada",
					"match": "(?i)\\bis\\b"
				}
			]
		},
		"with_clause": {
			"name": "meta.context.with.ada",
			"patterns": [
				{ "include": "#limited_with_clause" },
				{ "include": "#nonlimited_with_clause" }
			]
		}
	},
	"scopeName": "source.ada"
}